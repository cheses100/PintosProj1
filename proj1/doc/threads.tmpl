			+--------------------+
			|        CS 350      |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+
				   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Daniel Mizrahi <dmizrahi@usc.edu>
Parshav Kothary <pkothary@usc.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

-- thread.c:
...
/* List of processes in the BLOCKED STATE, that are waiting to
	 be woken at a certain tick. */
static struct list sleep_list;
...

-- thread.h:
...
struct thread {
	...
	int64_t endTick; /* If thread was put to sleep, wake up at this tick */
	...
};
...
* Yields the CPU.  The current thread is put to sleep and
	 may be scheduled again only after tick 'end'. */
void thread_yield_for_seconds (int64_t end);
...

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

timer_sleep() now sets the time a thread needs to wake up at on the thread, 
and then puts the thread to sleep. The schedule function then checks to 
see if the thread is ready to be woken up

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

We got rid of busy waiting and now run the check to see if it's time to 
put the thread back to the ready list in the schedule function

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

We prevent interrupts 

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?
We considered checking if the timer was done on every tick but realized it
would be more efficient to check it from the scheduler instead


			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

 -- thread.h:
...
struct thread {
	...
	struct list held_locks;				/* List of locks held */
	struct lock* waiting_lock;		    /* Currently waiting on this lock */
	...
};
...

 -- synch.h
...
struct lock {
	...
	int64_t max_waiter_priority;		/* max priority from threads on locks waiting list */
	struct list_elem elem;				/* list elem for lock list (held by thread) */
	...
};
...

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

(Included threads_design_doc_b2.png in doc folder)

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

We go through the waiting threads and check which one has the highest
priority, and choose that one to be woken up.

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

We check to see if the lock is currently being held, and if so
we then go to the thread holding the lock and give it our priority,
if it happens to have a lower priority than the current thread.
Then we go and check to see if that thread is also waiting on any 
other locks, and if so, check to see if the lock it's waiting on
is held by a lower priority thread, and if so, we upgrade that threads
priority too, and then keep doing this for all threads until no more
threads are waiting on locks.

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

The thread that was holding it would have to have a donated priority 
so it's priority will be reset to it's original priority, or downgraded
to the lowest priority needed in order to release any of the other 
locks that it's holding.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

We first prevent interrupts to make sure the code runs before another 
thread is switched in and we then also yield the thread, because 
we may now want a new thread to be switched in. 

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?
We originally added threads that were waiting for a lock to a fifo queue,
and would donate our priority to every thread ahead of the thread being
added if they were of lower priority. We realized this wouldn't allow
threads that have a higher priority to acquire a lock before threads of
a lower priority so we changed it to select the thread with the highest
priority in the queue of threads waiting for a lock. 

